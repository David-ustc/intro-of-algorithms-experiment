// lab4.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <algorithm>
#include <string>

using namespace std;

const double Punishment = -100;
const double Reward = 100;
const double gamma = 0.9;

// 新建转移概率矩阵
// 四块儿分别对应，上，下，左，右。即P = P[a][s][s']
// 上:0，下:1，左:2，右:3
const double P[4][11][11] = {
    {{0.15, 0.8,	0,	0.05,	0,	0,	0,	0,	0,	0,	0},
    {0, 0.2,	0.8,	0,	0,	0,	0,	0,	0,	0,	0},
    {0,	0,	0.95,	0,	0.05,	0,	0,	0,	0,	0,	0},
    {0.05,	0,	0,	0.9,	0,	0.05,	0,	0,	0,	0,	0},
    {0,	0,	0.05,	0,	0.9,	0,	0,	0.05,	0,	0,	0},
    {0,	0,	0,	0.05,	0,	0.1,	0.8,	0,	0.05,	0,	0},
    {0,	0,	0,	0,	0,	0,	0.15,	0.8,	0,	0.05,	0},
    {0,	0,	0,	0,	0.05,	0,	0,	0.9,	0,	0,	0.05},
    {0,	0,	0,	0,	0,	0.05,	0,	0,	0.15,	0.8,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1}},

    {{0.95,	0,	0,	0.05,	0,	0,	0,	0,	0,	0,	0},
    {0.8,	0.2,	0,	0,	0,	0,	0,	0,	0,	0,	0},
    {0,	0.8,	0.15,	0,	0.05,	0,	0,	0,	0,	0,	0},
    {0.05,	0,	0,	0.9,	0,	0.05,	0,	0,	0,	0,	0},
    {0,	0,	0.05,	0,	0.9,	0,	0,	0.05,	0,	0,	0},
    {0,	0,	0,	0.05,	0,	0.9,	0,	0,	0.05,	0,	0},
    {0,	0,	0,	0,	0,	0.8,	0.15,	0,	0,	0.05,	0},
    {0,	0,	0,	0,	0.05,	0,	0.8,	0.1,	0,	0,	0.05},
    {0,	0,	0,	0,	0,	0.05,	0,	0,	0.95,	0,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1}},

    {{0.95,	0.05,	0,	0,	0,	0,	0,	0,	0,	0,	0},
    {0.05,	0.9,	0.05,	0,	0,	0,	0,	0,	0,	0,	0},
    {0,	0.05,	0.95,	0,	0,	0,	0,	0,  0,	0,	0},
    {0.8,	0,	0,	0.2,	0,	0,	0,	0,	0,	0,	0},
    {0,	0,	0.8,	0,	0.2,	0,	0,	0,	0,	0,	0},
    {0,	0,	0,	0.8,	0,	0.15,	0.05,	0,	0,	0,	0},
    {0,	0,	0,	0,	0,	0.05,	0.9,	0.05,	0,	0,	0},
    {0,	0,	0,	0,	0.8,	0,	0.05,	0.15,	0,	0,	0},
    {0,	0,	0,	0,	0,	0.8,	0,	0,	0.15,	0.05,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1}},

    {{0.15,	0.05,	0,	0.8,	0,	0,	0,	0,	0,	0,	0},
    {0.05,	0.9,	0.05,	0,	0,	0,	0,	0,	0,	0,	0},
    {0,	0.05,	0.15,	0,	0.8,	0,	0,	0,	0,	0,	0},
    {0,	0,	0,	0.2,	0,	0.8,	0,	0,	0,	0,	0},
    {0,	0,	0,	0,	0.2,	0,	0,	0.8,	0,	0,	0},
    {0,	0,	0,	0,	0,	0.15,	0.05,	0,	0.8,	0,	0},
    {0,	0,	0,	0,	0,	0.05,	0.1,	0.05,	0,	0.8,	0},
    {0,	0,	0,	0,	0,	0,	0.05,	0.15,	0,	0,	0.8},
    {0,	0,	0,	0,	0,	0,	0,	0,	0.95,	0.05,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0},
    {0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1}},
};

//double calExpect(const double* A) {
//    return A[10] * Reward + A[9] * Punishment;
//}

//double vectorMul(const double* A, double* B) {
//    double sum = 0;
//    for (int i=0; i < 11; i++) {
//        sum += A[i] * B[i];
//    }
//    return sum;
//}

int argmax(double* Q) {
    int index = 0;
    double max = 0;
    for (int i = 0; i < 4; i++) {
        if (Q[i] > max) {
            max = Q[i];
            index = i;
        }
    }
    return index;
}

// 将action_value翻译成汉字
string translate(int index) {
    switch (index) {
    case 0:
        return string("上");
    case 1:
        return string("下");
    case 2:
        return string("左");
    default:
        return string("右");
    }
}

int main()
{   std::cout << "Reward = " << Reward <<  " , " <<" Punishment = " << Punishment << endl;
    double reward_init[11]={0};
    reward_init[9] = Punishment;
    reward_init[10] = Reward;

    /* 值迭代 */
    double V[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    double Q[11][4] = { 0 };
    /*请在此处补全值迭代的代码*/
    for(long epoch=0; epoch<6000;epoch++){
        for(int s=0;s<11;s++){
            for(int a=0;a<4;a++){
                double sum=0;
                for(int k=0;k<11;k++){
                    if(P[a][s][k]!=0) {
                        // k equals s_prime
                        sum+=P[a][s][k]*reward_init[k];
                        sum+= gamma * P[a][s][k]*V[k];
                    }
                }
                Q[s][a] = sum;
            }
            double maxV=-10000;
            for(int a=0;a<4;a++){
                if(Q[s][a]>maxV) {maxV=Q[s][a];V[s]=Q[s][a];}
            }
        }
    }
    std::cout << "值迭代： " << endl;
    std::cout << "状态" << "\t" << " " << "\t" << "价值" << endl;
    for (int s = 0; s < 11; s++) {
        std::cout << s+1 << "\t" <<" : " << "\t" << V[s] << endl;
    }

    std::cout << "---------------------------------------------" << endl;

    //Print Policy
    std::cout << "状态" << "\t" << " " << "\t" << "动作" << endl;
    for (int s = 0; s < 9; s++) {
        std::cout << s+1 << "\t" << " -> " << "\t" <<translate(argmax(Q[s])) <<endl;
    }

    std::cout << "---------------------------------------------" << endl;

    getchar();
    /* 策略迭代 */
    int pi[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    double V_2[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    
    /* 请在此处补全策略迭代的代码
    *
    */

    std::cout << "策略迭代： " << endl;
    std::cout << "状态" << "\t" << " " << "\t" << "价值" << endl;
    for (int s = 0; s < 11; s++) {
        std::cout << s + 1 << "\t" << " : " << "\t" << V_2[s] << endl;
    }

    std::cout << "---------------------------------------------" << endl;
    std::cout << "状态" << "\t" << " " << "\t" << "动作" << endl;
    for (int s = 0; s < 9; s++) {
        std::cout << s + 1 << "\t" << " -> " << "\t" << translate(pi[s]) << endl;
    }

    return 0;
}

